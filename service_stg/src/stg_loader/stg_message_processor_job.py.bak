import time
import json
from datetime import datetime
from logging import Logger
from lib.kafka_connect import KafkaConsumer, KafkaProducer
from lib.redis import RedisClient
from stg_loader.repository import StgRepository

class MockRedisClient:
    def __init__(self):
        self._data = {}  # Simulated data in Redis

    def get_user_info(self, user_id):
        # Simulated implementation to get user info from Redis based on user_id
        if user_id in self._data:
            return self._data[user_id]
        else:
            return None

    def get_restaurant_info(self, restaurant_id):
        # Simulated implementation to get restaurant info from Redis based on restaurant_id
        if restaurant_id in self._data:
            return self._data[restaurant_id]
        else:
            return None



class StgMessageProcessor:
    def __init__(self,
                 consumer: KafkaConsumer,
                 producer: KafkaProducer,
                 redis: RedisClient,
                 stg_repository: StgRepository,
                 batch_size: int,
                 logger: Logger) -> None:
        self._consumer = consumer
        self._producer = producer
        self._redis = redis
        self._stg_repository = stg_repository
        self._batch_size = batch_size
        self._logger = logger

    def run(self) -> None:
        self._logger.info(f"{datetime.utcnow()}: START")

        for _ in range(self._batch_size):
            message = self._consumer.consume()

            if message is None:
                break

            payload = message.get('payload')
            user_id = payload.get('user_id')
            restaurant_id = payload.get('restaurant_id')


            user_info = self._redis.get_user_info(user_id)
            restaurant_info = self._redis.get_restaurant_info(restaurant_id)

            output_message = {
                'user_info': user_info,
                'restaurant_info': restaurant_info,
                'payload': payload
            }

            self._stg_repository.order_events_insert(
                object_id=message.message_id,
                object_type=message.message_type,
                sent_dttm=datetime.utcnow(),
                payload=json.dumps(output_message)
            )

            self._producer.publish(output_message)

        self._logger.info(f"{datetime.utcnow()}: FINISH")
